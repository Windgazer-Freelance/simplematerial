/*
# Buttons and other actions

The following partial mimics to some degree of accuracy the Google Material Design specs
on [buttons](http://www.google.com/design/spec/components/buttons.html#buttons-usage).

A somewhat 'leading' name for anything that might need to look like a button, but might
well be just a hyperlink.
*/

/*
# Ripple Effect

To get some advanced usability into the mix, the following SCSS defines the 'ripple'
effect most people have come to expect of material design implementations. Since I do
agree that it is terribly user friendly and should be implemented :)

The effect is implemented for any of the actions defined in this partial. For optimal
effect it'll need some aditional JavaScript. In it's plain working it'll always ripple
from the center of the element. Using a simple script will allow the ripple to start from
the point of touch.

The intend is to mimic to a reasonable degree the specification by google:
http://www.google.com/design/spec/animation/responsive-interaction.html

*/

%mt-bgcircle {
    background-image: url('data:image/svg+xml;utf8,<svg viewBox="0 0 4 4" xmlns="http://www.w3.org/2000/svg"><circle cx="2" cy="2" r="2" fill="currentColor" fill-opacity="0.25"/></svg>');
    background-position: 50% 50%;
    background-repeat: no-repeat;
}
%mt-touchdot {
    @extend %mt-bgcircle;
    height: 1em;
    margin: -0.5em;
    opacity: 0;
    pointer-events: none;
    position: absolute;
    transition: opacity 250ms ease-in 250ms;
    width: 1em;
    &.on {
        transition: none;
        opacity: 1;
    }
}
%mt-ripple-active {
    background-position: 50% 50% !important;
    background-size: 110%;
    transition: background-size 250ms ease-in, background-position 50ms ease-in 200ms;
}
%mt-ripple {
    @extend %mt-bgcircle;
    background-size: 0;
    &:focus {
        @extend %mt-ripple-active;
    }
}/*
# Flat Button

```
<a class="mt-flatButton" href="#">Call to Action</a>
```
*/
%mt-flatButton {
    @extend %reset;
    @extend %mt-button;
    @extend %mt-ripple;
    cursor: pointer;
    display: inline-block;
    line-height: 1;
    margin: 0 ($mt-basePadding / 3) ($mt-basePadding / 4) 0;
    padding: ($mt-basePadding / 2) ($mt-basePadding / 2);
    text-transform: uppercase;
    text-align: center;
}

/*
# Floating Action
```
<a class="mt-floatingAction" href="#">+</a>
```
*/
%mt-floatingAction {
    @extend %mt-flatButton;
    @extend %mt-s-floating;
    line-height: $mt-basePadding;
    border-radius: 50%;
    padding: ($mt-basePadding / 2) ($mt-basePadding / 2);
    width: $mt-basePadding;
}

/*
# Raised Button

```
<a class="mt-raisedButton" href="#">Call to Action</a>
```
*/
%mt-raisedButton {
    @extend %mt-flatButton;
    @extend %mt-s-raised;
    border-radius: ($mt-basePadding / 8);
    padding: ($mt-basePadding / 2) ($mt-basePadding);
}

/*
# Floating Action Primary Colour
```
<a class="mt-floatingActionP500" href="#">+</a>
```
*/
%mt-floatingActionP500 {
    @extend %mt-floatingAction;
    @extend %mt-P500;
}

/*
# Floating Action Alternate Colour
```
<a class="mt-floatingActionA400" href="#">+</a>
```
*/
%mt-floatingActionA400 {
    @extend %mt-floatingAction;
    @extend %mt-A400;
}

/*
# Flat Button Primary Colour

```
<a class="mt-flatButtonP500" href="#">Call to Action</a>
```
*/
%mt-flatButtonP500 {
    @extend %mt-flatButton;
    color: $mt-c-P500;
}

/*
# Flat Button Alternate Colour

```
<a class="mt-flatButtonA400" href="#">Call to Action</a>
```
*/
%mt-flatButtonA400 {
    @extend %mt-flatButton;
    color: $mt-c-A400;
}

/*
# Raised Button Primary Colour

```
<a class="mt-raisedButtonP500" href="#">Call to Action</a>
```
*/
%mt-raisedButtonP500 {
    @extend %mt-raisedButton;
    @extend %mt-P500;
}

/*
# Raised Button Alternate Colour

```
<a class="mt-raisedButtonA400" href="#">Call to Action</a>
```
*/
%mt-raisedButtonA400 {
    @extend %mt-raisedButton;
    @extend %mt-A400;
}

/*
#TODO
*/
%declined {
    box-shadow: inset 0 0 0.1em rgba( 0,0,0 ,0.35 ),
                inset 0.05em 0.1em 0.1em rgba( 0,0,0 ,0.35 );
}

%mt-flatButtonIcon {
    height: 1em;
    width: 1.4em;
    overflow: hidden;
    text-align: center;
    &::before {
        display: inline-block;
        width: 100%;
        margin: 0 1em 1em 0;
        font-family: '42tiles';
        font-weight: 300;
    }
}

%mt-flatButtonReload {
    @extend %mt-flatButtonIcon;
    &::before {
        content: "\e802";
    }
}

/*
# Predefined icons

In the near future I would like to implement a set of predefined icons based on the set of
[materials design icons on github](https://github.com/google/material-design-icons).
*/
%mt-flatButtonGame {
    @extend %mt-flatButtonIcon;
    &::before {
        content: "\e900";
    }
}

%mt-flatButtonStats {
    @extend %mt-flatButtonIcon;
    &::before {
        content: "\e901";
    }
}

%mt-flatButtonAchievements {
    @extend %mt-flatButtonIcon;
    &::before {
        content: "\e902";
    }
}

%mt-flatButtonSettings {
    @extend %mt-flatButtonIcon;
    &::before {
        content: "\e903";
    }
}

%mt-flatButtonLicense {
    @extend %mt-flatButtonIcon;
    &::before {
        content: "`";
    }
}
